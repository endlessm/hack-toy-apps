{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww25480\viewh8480\viewkind0
\deftab720
\pard\pardeftab720\sl220\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1. Remove all duplicated built-in stuff from the toy-app, e.g. flip button, flip animation, character notification, etc. (Jeffrey).\
\
2. We need a\'a0 "flip" global function in the toy-app game code, so we can tell the toy-app to transition from the original screen to the "signal tweaking" screen. \
We will trigger this function from the python app template. (toy-app side Jeffrey, template side Martin).\
\
3. Remove the built-in toolbox from the toy-app. (Jeffrey)\
\
4. Expose the 3 variables needed for the signal adjustment, so we can access them with clippy, to implement the toolnox (toy-app side Jeffrey, toolbox side Martin)\
\
5. Add one extra variable to the toy-app, to signal that the lock has been "unlocked" and that we can transition to the Desktop. (toy-app side Jeffrey, FBE side Joaquim)\
\
6. Fix the same bug we had with hackyballs, where we could not click on certain objects if they don't fit in the screen (e.g. hidden with scrollbars). (Jeffrey).\
}